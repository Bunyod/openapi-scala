openapi: 3.0.0

info:
  title: 'enfore ERP API'
  version: "0.0.1"
  description: |
    This is a first design version of the enforePOS-API

tags:
  - name: products
    description: |
      Products are things that are sold by the organization.
      They are identified by a unique ID but may have additional identifiers such as a GTIN or ASIN.
  - name: invoices
    description: |
      Invoices are created whenever one or multiple products are sold.
      They are created from Orders (which are not available via the API yet) and represent the accounting/ledger-side view of the sale.
  - name: subscriptions
    description: |
      The API provides the capability to build fast, real-time streams using events.
      For this, users must register an endpoint and will then be called when new events occur.
      As event consumer you must be able to process duplicate events.
      It is recommended to validate from time to time that no data is missing by using the specific query APIs.
      Currently, the only type of events that are supported are "invoice".

paths:
  # products ========== ========== ========== ========== ==========
  '/products':
    post:
      summary: Add a new product to the organisation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        201:
          description: Product has successfully been added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid payload was sent by the client
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        403:
          description: Credentials missing or not sufficient
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        409:
          description: When payload contains an external ID and a product with the same external ID already exists
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
      tags:
        - products
  '/products/{product-id}':
    get:
      summary: Load a product by its identifier
      parameters:
        - name: product-id
          description: ID of the product to load
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product is successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        403:
          description: Credentials missing or not sufficient
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        404:
          description: Product not found or invalid identifier
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        422:
          description: Failure on converting resource to API format
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
      tags:
        - products
    put:
      summary: Full update of a product
      parameters:
        - name: product-id
          description: ID of the product to update
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: Product was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid payload was sent by the client
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        403:
          description: Credentials missing or not sufficient
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        404:
          description: Product not found or invalid identifier
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        422:
          description: Failure on converting resource to API format
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
      tags:
        - products
  '/products/external-id/{external-id}':
    get:
      summary: Load a product by its external ID
      parameters:
        - name: external-id
          description: External ID of the product to load
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product is successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        403:
          description: Credentials missing or not sufficient
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        404:
          description: Product not found or invalid identifier
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        422:
          description: Failure on converting resource to API format
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
      tags:
        - products
    put:
      summary: Update or create a product addressed by its external ID
      parameters:
        - name: external-id
          description: External ID of the product to update/create
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: Product was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        201:
          description: Product was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid payload was sent by the client
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        403:
          description: Credentials missing or not sufficient
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        422:
          description: Failure on converting resource to API format
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
      tags:
        - products

  # invoices ========== ========== ========== ========== ==========
  '/invoices':
    get:
      summary: Returns invoices
      description: |
        Returns invoices for the specified interval, sorted in ascending order by transaction date and time.
        <br><br>
        <strong>
        Since our platform was built as a distributed system, we are subject to the laws of the "Eventual consistency" model. This means that time periods close to the present may be unstable and could contain new items if the same time interval is queried again.
        <br><br>
        We therefore recommend that intervals that are close to the present time should be re-requested and verified at a later time.
        </strong>
      parameters:
        - name: from
          in: query
          description: |
            Defines the time from which invoices are to be returned.
            Invoices with exactly this date are also returned - this means that the start of a left-closed interval is defined.
            Timestamp in UTC. The date-time notation as defined by RFC 3339 (https://www.ietf.org/rfc/rfc3339.txt), section 5.6, with the "Z" as time-offset. For example, 2017-07-21T17:32:28.123Z
          schema:
            type: string
            format: date-time
          required: true

        - name: to
          in: query
          description: |
            Defines the time up to which the invoices are to be returned.
            Invoices with exactly this date are not returned - this means that the end of a right-open interval is defined.
            Timestamp in UTC. The date-time notation as defined by RFC 3339 (https://www.ietf.org/rfc/rfc3339.txt), section 5.6, with the "Z" as time-offset. For example, 2017-07-21T17:32:28.123Z
          schema:
            type: string
            format: date-time
          required: true

        - name: limit
          in: query
          description: |
            Max number of invoices to be returned per page.
            Note that both the `invoices` as well as the `problems` arrays of `Invoices` count towards this number to allow a simple,
            consistent paging over all invoices (and problems) of a given timeframe.
            If not given, defaults to `200`.
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 5000

        - name: offset
          in: query
          description: |
            Offset of invoices and problems of where to start the next page.
            Similar to limit and offset in SQL, one would obtain the second page with `limit=10&offset=10`.
            Note that this paging with limit and offset is within a time interval that is specified with `from` and `to`.
            If not given, defaults to `0`.
          schema:
            type: integer
            format: int64
            minimum: 0

      responses:
        200:
          description: Invoice information is successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoices'
        400:
          description: Invalid parameters were sent by the client
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        403:
          description: Credentials missing or not sufficient
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        404:
          description: Invalid or missing parameters
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
      tags:
        - invoices

  # subscriptions ========== ========== ========== ========== ==========
  '/subscriptions':
    post:
      summary: Register an event consumer with the API.
               If the callback URL is already registered, we return the original registration ID.
               We will continue attempting to send new items to registered subscriptions until they are deleted.
               In case we cannot reach the endpoint, we will apply an exponential backoff.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventConsumerRegistration'
      responses:
        201:
          description: Successful Registration. Body contains the registration ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventConsumerRegistration'
        400:
          description: Invalid payload was sent by the client
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        403:
          description: Credentials missing or not sufficient
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
      callbacks: # Callback definition
        newInvoice:
          '{$request.body#/callback_url}':
            post:
              requestBody: # Contents of the callback message
                required: true
                description: |
                  A new block of Invoices.
                  As the Invoices type containts a list of invoices, a short amount of buffering can be applied.
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Invoices'
              responses: # Expected responses to the callback message
                202:
                  description: Event notification successfully received
      tags:
        - subscriptions
  '/subscriptions/{registration-id}':
    delete:
      summary: Delete an event consumer registration
      parameters:
        - name: registration-id
          description: ID of the registration to delete
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Registration was successfully deleted
        403:
          description: Credentials missing or not sufficient
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
        404:
          description: Registration not found or invalid identifier
          content:
            application/problem+json:
              schema:
                $ref: '../shared/problem.yaml#/components/schemas/Problem'
      tags:
        - subscriptions

components:
  schemas:
    # Product types ========== ========== ========== ========== ==========
    Product:
      description: |
        Represents a resource that is sold by the business.
      type: object
      properties:
        id:
          description: |
            The technical identifier of the product. Assigned by the enfore platform on creation of the
            product and not changeable afterwards.
          type: string
          readOnly: true
        name:
          description: The name of the product.
          type: string
          maxLength: 256
        external_id:
          description: |
            An identifier for use by the external system.
            Can also be used to address the product via the "/products/external-id/{external-id}" resource.
          type: string
          maxLength: 256
        article_id:
          description: |
            The identifier by which the article is addressed by the business when communicating internally
            or with customers or suppliers.

            Once specified, the article ID cannot be modified anymore. Otherwise, business documents such
            as invoices or packaging lists created at different points in time may list the same article
            ID for different products.
          type: string
          maxLength: 256
        management_unit:
          description: |
            The unit by which the business manages the product.

            All transaction involving the product must use integer multiples of "1" of this unit.

            For example, when the management unit of a product is "kg", only integer multiples of "1 kg" are
            valid as quantites for sale, purchase or stock tracking of the product.

            Note: The numerical part is currently hard-coded to be "1", but that may be changed in the future
            to allow management units of "0.5 kg".
          $ref: '#/components/schemas/UnitOfMeasure'
        sales_price_and_quantity:
          description: |
            The sales price and quantity of the product.
            Note that the quantity specified as part of the ProductPriceAndQuantity is also being used as the default
            quantity when adding the product to a basket.
          $ref: '#/components/schemas/ProductPriceAndQuantity'
        product_identifiers:
          description: Additional identifiers assigned to the product.
          $ref: '#/components/schemas/ProductIdentifiers'
        tax_category:
          description: The tax category used for determining the sales tax for the product.
          $ref: '#/components/schemas/TaxCategory'
        tax_exemption_reason:
          description: |
            Optional reason why the product is exempt from sales tax. When specified, sales tax is resolved
            to zero rate, independent of tax category.
          $ref: '#/components/schemas/TaxExemptionReason'
      required:
        - id
        - name
        - management_unit
        - tax_category
    # Product data types
    ProductPriceAndQuantity:
      description: |
        The set of information defining the price of a product.
        A product's price is always relative to a specific quantity of the product.
        For example, if a single bottle of water costs 1€, 5 bottles cost 5€.
        Additionally, a given price might be including tax or not.
        Therefore, the ProductPriceAndQuantity is a combination of a quantity, a price and a "price is gross"-flag.
      type: object
      properties:
        price:
          description: The price of the product (per the given quantity).
          $ref: '#/components/schemas/Money'
        price_is_gross:
          description: Flag indicating whether the price is gross (true) or net (false)
          type: boolean
        quantity:
          description: The quantity that the price is relative to.
          $ref: '#/components/schemas/Quantity'
      required:
        - price
        - price_is_gross
        - quantity
    ProductIdentifiers:
      description: The set of additional identifiers that can be specified for a product.
      type: object
      properties:
        ean:
          description: EAN-8, EAN-12 or EAN-13
          type: string
          minLength: 8
          maxLength: 13
        gtin:
          description: GTIN-14
          type: string
          minLength: 14
          maxLength: 14
    # ========== ========== ========== ========== ==========

    # Invoice types ========== ========== ========== ========== ==========
    Invoice:
      type: object
      properties:
        id:
          description: |
            The technical identifier of the invoice. Assigned by the enfore platform on creation of the
            invoice and not changeable afterwards.
          type: string
          readOnly: true
        store_id:
          description: ID of the store where the invoice was generated
          type: string
        register_id:
          description: ID of the register where the invoice was generated
          type: string
        operator_id:
          description: ID of the operator where the invoice was generated
          type: string
        number:
          description: Invoice number (as printed on the invoice document)
          type: string
        transaction_date_and_time:
          description: Invoice date in date-time notation in UTC. The date-time notation as defined by RFC 3339 (https://www.ietf.org/rfc/rfc3339.txt), section 5.6, with the "Z" as time-offset. For example, 2017-07-21T17:32:28.123Z
          type: string
          format: date-time
# To be discussed / M.Struck
#        transaction_start:
#          description: Start of the transaction (when first item was added). Timestamp in UTC. The date-time notation as defined by RFC 3339, section 5.6, with the "Z" as time-offset. For example, 2017-07-21T17:32:28Z
#          type: string
#          format: date-time
#        transaction_end:
#          description: End of the transaction (when transaction was "booked"). Timestamp in UTC. The date-time notation as defined by RFC 3339, section 5.6, with the "Z" as time-offset. For example, 2017-07-21T17:32:28Z
#          type: string
#          format: date-time
        total_gross_amount:
          description: The final amount "to pay" incl. taxes.
          $ref: '#/components/schemas/Money'
        total_net_amount:
          description: The final amount "to pay" excl. taxes.
          $ref: '#/components/schemas/Money'
        items:
          description: The items of the invoice
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItem'
        payments:
          description: The payments for the invoice
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        discounts:
          description: The invoice-level discounts that have been applied to the invoice
          type: array
          items:
            $ref: '#/components/schemas/Discount'
        # OPEN: Transaction Type
        # OPEN: Qualifier for Partner Number
        # OPEN: Partner number
        # OPEN: Drawer Number Used at POS Client
        # OPEN: (void) Reference to Original Receipt for Retail Store ID
        # OPEN: (void) Reference to Original Receipt for Posting Date
        # OPEN: (void) Reference to Original Receipt for Workstation ID
        # OPEN: (void) Reference to Original Receipt for Transaction Number
        # OPEN: (void) Reference to Original Receipt for Start Timestamp
        # OPEN: (void) Reason
        # OPEN: (void) Reference to Original Receipt for Line Item Number
      required:
        - id
        - store_id
        - number
        - transaction_date_and_time
        #- transaction_start
        #- transaction_end
        - items
        - payments
        - discounts
    Invoices:
      description: |
        A list of invoices together with any problems that could have occurred.
      type: object
      properties:
        items:
          description: The invoices contained in the sequence
          type: array
          items:
            $ref: '#/components/schemas/Invoice'
        problems:
          description: Any problems that occurred when handling the query
          type: array
          items:
            $ref: '../shared/problem.yaml#/components/schemas/Problem'
      required:
        - items
    InvoiceItem:
      type: object
      properties:
        id:
          description: |
            The technical identifier of the invoice item. Assigned by the enfore platform on creation
            of the item and not changeable afterwards.
          type: string
          readOnly: true
        name:
          description: The name of the invoice item. Usually, this is simply the name of the product.
          type: string
        product_id:
          description: The identifier of the product that was sold.
          type: string
        product_external_id:
          description: The external ID of the product that was sold.
          type: string
        quantity:
          description: The quantity of product that was sold.
          $ref: '#/components/schemas/Quantity'
        gross_amount:
          description: The final amount "to pay" incl. taxes.
          $ref: '#/components/schemas/Money'
        net_amount:
          description: The final amount "to pay" excl. taxes.
          $ref: '#/components/schemas/Money'
        undiscounted_gross_amount:
          description: The amount "before discounts" incl. taxes.
          $ref: '#/components/schemas/Money'
        undiscounted_net_amount:
          description: The amount "before discounts" excl. taxes.
          $ref: '#/components/schemas/Money'
        discounts:
          description: The item-level discounts that have been applied to this item
          type: array
          items:
            $ref: '#/components/schemas/Discount'
        taxes:
          description: List of taxes that were applied to the item
          type: array
          items:
            $ref: '#/components/schemas/Tax'
        depending_items:
          description: |
            List of items that depend on this item.

            An item depends on another item, if it cannot exist alone. There are different types
            of dependencies, therefore each element in the list is a pair of the id of the depending
            item and the type of the dependency.
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItemDependency'
        # OPEN: Sales Item Number
        # OPEN: Sales Item Type
        # OPEN: Qualifier for Article Identifier
      required:
        - id
        - product_id
        - quantity
        - gross_amount
        - net_amount
        - undiscounted_gross_amount
        - undiscounted_net_amount
        - discounts
        - taxes
        - depending_items
    Payment:
      type: object
      properties:
        method:
          description: Method of the payment. E.g., CASH or CREDIT_CARD.
          $ref: '#/components/schemas/PaymentMethod'
        amount:
          description: Amount that was paid.
          $ref: '#/components/schemas/Money'
        timestamp:
          description: Time when the payment was performed. Timestamp is in UTC.
          type: string
          format: date-time
        # OPEN: tender item number
      required:
        - method
        - amount
        - timestamp
    Discount:
      type: object
      properties:
        name:
          description: The name of the discount rule/promotion that was applied
          type: string
        gross_amount:
          description: The discount amount incl. taxes.
          $ref: '#/components/schemas/Money'
        net_amount:
          description: The discount amount excl. taxes.
          $ref: '#/components/schemas/Money'
        # OPEN: discount type, discount reason
      required:
        - name
        - net_amount
        - gross_amount
    InvoiceItemDependency:
      type: object
      properties:
        depending_item_id:
          description: The ID of the depending item.
          type: string
        dependency_type:
          description: The type of the dependency.
          $ref: '#/components/schemas/InvoiceItemDependencyType'
      required:
        - depending_item_id
        - dependency_type
    InvoiceItemDependencyType:
      description: |
        Defines the different types of dependencies that can exist between invoice items.

        * UNKNOWN - The dependency type is not known
        * OPTION - The depending item is an option of its dependee
        * DEPOSIT - The depending item is a deposit item of its dependee
      type: string
      enum:
        - UNKNOWN
        - OPTION
        - DEPOSIT
    # ========== ========== ========== ========== ==========

    # Event types ========== ========== ========== ========== ==========
    EventConsumerRegistration:
      type: object
      properties:
        id:
          description: |
            The technical identifier of the event consumer registration.
            Assigned by the enfore platform on creation of the registration.
          type: string
          readOnly: true
        types:
          description: The list of event types that the user wants to consume.
          type: array
          items:
            $ref: '#/components/schemas/EventType'
          minItems: 1
        callback_url:
          description: The callback URL where event notifications are to be delivered.
                       It *must* be HTTPS to prevent man-in-the-middle attacks.
          type: string
          format: uri
          example: https://myserver.com/send/events/here
      required:
        - id
        - types
        - callback_url
    EventType:
      description: |
        List of supported event types.

        `INVOICES` - Invoices have been created and are send to the consumer as `Invoice`.
      type: string
      enum:
        - INVOICES
    # ========== ========== ========== ========== ==========

    # shared common types ========== ========== ========== ========== ==========
    Currency:
      description: Represents a currency. Uses the ISO 4217 codes.
      type: string
      enum:
        - AUD
        - BRL
        - CAD
        - CHF
        - CNY
        - DKK
        - EUR
        - GBP
        - HKD
        - IDR
        - INR
        - JPY
        - KRW
        - MXN
        - MYR
        - NOK
        - NZD
        - PHP
        - RUB
        - SEK
        - SGD
        - TRY
        - TWD
        - USD
        - ZAR
    PaymentMethod:
      description: Methods of payment.
      type: string
      enum:
        - CASH
        - CREDIT_CARD
        - DEBIT_CARD
        - DIRECT_DEBIT
        - BANK_TRANSFER
        - PAYPAL
        - GOOGLE_PAY
        - AMAZON_PAYMENTS
        - MPASS
        - CHECK
        - ACCOUNT
        - SALES_VOUCHER
    TaxCategory:
      description: |
        Represents the locale-independent representation of a specific type of tax.

        The category does not represent a specifix tax. This is needed as taxes are a) different depending
        on country (and sometimes even within a single country) and b) tax rates may change over time but
        the actual Tax objects must not change as they are referenced by existing invoices.

        For example, the tax category STANDARD is mapped to currently mapped to "DE/19%" for Germany and to "UK/20%"
        for the UK. If Germany would increase the standard tax rate to 21%, the mapping for Germany would be updated,
        but the products would still use the same STANDARD category as before.

        Additional factors may also influcence the mapping, for example the category REDUCED_TAKE_AWAY normally gets
        mapped to "DE/19%" for Germany. But when the sale is flagged as "to go", the category is mapped to "DE/7%"
        instead.
      type: string
      enum:
        - STANDARD
        - REDUCED
        - REDUCED_TAKE_AWAY
        - NO_TAX
    Tax:
      description: |
        A Tax represents a specific and unchangeable tax. Whenever a tax (rate) changes due to new legislation
        or other reasons, a new Tax must be defined and used from then on.

        For example, the standard VAT rates in Germany have been changed multiple times in the last 50 years:
        * 01.01.1968 – 30.06.1968 = 10%
        * 01.07.1968 – 31.12.1977 = 11%
        * 01.01.1978 – 30.06.1979 = 12%
        * 01.07.1979 – 30.06.1983 = 13%
        * 01.07.1983 – 31.12.1992 = 14%
        * 01.01.1993 – 31.03.1998 = 15%
        * 01.04.1998 – 31.12.2006 = 16%
        * 01.01.2007 – current    = 19%

        For now, we only use the tax DE_STANDARD_VAT_2007. But if, hypothetically, Germany would increase its
        standard VAT rate to 21% on 1/JAN/2020, we would define a new tax DE_STANDARD_VAT_2020 and use that from
        1/JAN/2020 on.
      type: string
      enum:
        - DE_STANDARD_VAT_2007
        - DE_REDUCED_VAT_2007
        - DE_NO_VAT
    TaxExemptionReason:
      description: Reasons for not applying tax on a product sale.
      type: string
      enum:
        - UNIVERSAL_POSTAL_SERVICE_DE
        - INTRA_COMMUNITY_TRADE_EU
        - THIRD_PARTY_COUNTRY_DELIVERY_EU
        - REVERSE_CHARGE_EU
    UnitOfMeasure:
      description: |
        Describes a unit of measure. Commonly uses as part of Quantity values.
      type: string
      enum:
        - ENERGY_JOULES
        - ENERGY_GIGAJOULES
        - ENERGY_MEGAJOULES
        - ENERGY_KILOJOULES
        - ENERGY_CENTIJOULES
        - ENERGY_MILLIJOULES
        - ENERGY_MICROJOULES
        - ENERGY_CALORIES
        - ENERGY_KILOCALORIES
        - ENERGY_WATTHOURS
        - ENERGY_GIGAWATTHOURS
        - ENERGY_MEGAWATTHOURS
        - ENERGY_KILOWATTHOURS
        - ENERGY_CENTIWATTHOURS
        - ENERGY_MILLIWATTHOURS
        - ENERGY_MICROWATTHOURS
        - LENGTH_KILOMETERS
        - LENGTH_METERS
        - LENGTH_DECIMETERS
        - LENGTH_CENTIMETERS
        - LENGTH_MILLIMETERS
        - LENGTH_POINTS
        - LENGTH_INCHES
        - LENGTH_FEET
        - LENGTH_YARDS
        - MASS_TONS
        - MASS_KILOGRAMS
        - MASS_GRAMS
        - MASS_MILLIGRAMS
        - MASS_POUNDS
        - QUANTITY_PIECES
        - TIME_SECONDS
        - TIME_MINUTES
        - TIME_HOURS
        - TIME_DAYS
        - TIME_WEEKS
        - DIGITALINFORMATION_BYTES
        - DIGITALINFORMATION_KILOBYTES
        - DIGITALINFORMATION_KIBIBYTES
        - DIGITALINFORMATION_MEGABYTES
        - DIGITALINFORMATION_MEBIBYTES
        - DIGITALINFORMATION_GIGABYTES
        - DIGITALINFORMATION_GIBIBYTES
        - DIGITALINFORMATION_TERABYTES
        - DIGITALINFORMATION_TEBIBYTES
        - DIGITALINFORMATION_PETABYTES
        - DIGITALINFORMATION_PEBIBYTES
        - TIME_MONTHS
        - TIME_YEARS
        - VOLUME_CUBIC_MILLIMETERS
        - VOLUME_CUBIC_CENTIMETERS
        - VOLUME_CUBIC_DECIMETERS
        - VOLUME_CUBIC_METERS
        - VOLUME_MILLILITERS
        - VOLUME_CENTILITERS
        - VOLUME_DECILITERS
        - VOLUME_LITERS
        - VOLUME_HECTOLITERS
        - VOLUME_FLUID_OUNCES
        - VOLUME_PINTS
        - VOLUME_QUARTS
        - VOLUME_GALLONS
        - VOLUME_BARRELS
    Quantity:
      description: A Quantity represents a quantity value (i.e., a unit and an amount), for example "3 pcs" or "2.5 kg".
      type: object
      properties:
        value:
          description: |
            The numerical value of the Quantity.
            Must be in the range of -9,000,000,000,000 to 9,000,000,000,000 and may use up to 6 decimal digits.
          type: number
          multipleOf: 0.000001
        unit:
          $ref: '#/components/schemas/UnitOfMeasure'
      required:
        - value
        - unit
    Money:
      description: A Money represents a monetary value (i.e., a currency and an amount), for example "120 EUR" or "2,500.75 USD".
      type: object
      properties:
        value:
          description: |
            The numerical value of the Money.
            Must be in the range of -9,000,000,000,000 to 9,000,000,000,000 and may use up to 6 decimal digits.
          type: number
          multipleOf: 0.000001
        unit:
          $ref: '#/components/schemas/Currency'
      required:
        - value
        - unit
    # ========== ========== ========== ========== ==========

servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/enfore.com/enfore-ERP-API/0.0.1
  - description: enforePOS Development
    url: https://erp-api.ci-stable.enfore.de/
